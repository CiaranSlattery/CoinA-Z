{"ast":null,"code":"/**\r\n * DevExtreme (esm/core/utils/error.js)\r\n * Version: 21.2.5\r\n * Build date: Mon Jan 17 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { extend } from \"./extend\";\nimport { logger } from \"./console\";\nimport { format } from \"./string\";\nimport { version } from \"../version\";\nvar ERROR_URL = \"http://js.devexpress.com/error/\" + version.split(\".\").slice(0, 2).join(\"_\") + \"/\";\nexport default function (baseErrors, errors) {\n  var exports = {\n    ERROR_MESSAGES: extend(errors, baseErrors),\n    Error: function () {\n      return makeError([].slice.call(arguments));\n    },\n    log: function (id) {\n      var method = \"log\";\n\n      if (/^E\\d+$/.test(id)) {\n        method = \"error\";\n      } else if (/^W\\d+$/.test(id)) {\n        method = \"warn\";\n      }\n\n      logger[method](\"log\" === method ? id : combineMessage([].slice.call(arguments)));\n    }\n  };\n\n  function combineMessage(args) {\n    var id = args[0];\n    args = args.slice(1);\n    return formatMessage(id, formatDetails(id, args));\n  }\n\n  function formatDetails(id, args) {\n    args = [exports.ERROR_MESSAGES[id]].concat(args);\n    return format.apply(this, args).replace(/\\.*\\s*?$/, \"\");\n  }\n\n  function formatMessage(id, details) {\n    return format.apply(this, [\"{0} - {1}. See:\\n{2}\", id, details, getErrorUrl(id)]);\n  }\n\n  function makeError(args) {\n    var id = args[0];\n    args = args.slice(1);\n    var details = formatDetails(id, args);\n    var url = getErrorUrl(id);\n    var message = formatMessage(id, details);\n    return extend(new Error(message), {\n      __id: id,\n      __details: details,\n      url: url\n    });\n  }\n\n  function getErrorUrl(id) {\n    return ERROR_URL + id;\n  }\n\n  return exports;\n}","map":{"version":3,"sources":["C:/Users/ciara/OneDrive - GMIT/Coin A-Z Test Repo/frontend/node_modules/devextreme/esm/core/utils/error.js"],"names":["extend","logger","format","version","ERROR_URL","split","slice","join","baseErrors","errors","exports","ERROR_MESSAGES","Error","makeError","call","arguments","log","id","method","test","combineMessage","args","formatMessage","formatDetails","concat","apply","replace","details","getErrorUrl","url","message","__id","__details"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/core/utils/error.js)\r\n * Version: 21.2.5\r\n * Build date: Mon Jan 17 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    extend\r\n} from \"./extend\";\r\nimport {\r\n    logger\r\n} from \"./console\";\r\nimport {\r\n    format\r\n} from \"./string\";\r\nimport {\r\n    version\r\n} from \"../version\";\r\nvar ERROR_URL = \"http://js.devexpress.com/error/\" + version.split(\".\").slice(0, 2).join(\"_\") + \"/\";\r\nexport default function(baseErrors, errors) {\r\n    var exports = {\r\n        ERROR_MESSAGES: extend(errors, baseErrors),\r\n        Error: function() {\r\n            return makeError([].slice.call(arguments))\r\n        },\r\n        log: function(id) {\r\n            var method = \"log\";\r\n            if (/^E\\d+$/.test(id)) {\r\n                method = \"error\"\r\n            } else if (/^W\\d+$/.test(id)) {\r\n                method = \"warn\"\r\n            }\r\n            logger[method](\"log\" === method ? id : combineMessage([].slice.call(arguments)))\r\n        }\r\n    };\r\n\r\n    function combineMessage(args) {\r\n        var id = args[0];\r\n        args = args.slice(1);\r\n        return formatMessage(id, formatDetails(id, args))\r\n    }\r\n\r\n    function formatDetails(id, args) {\r\n        args = [exports.ERROR_MESSAGES[id]].concat(args);\r\n        return format.apply(this, args).replace(/\\.*\\s*?$/, \"\")\r\n    }\r\n\r\n    function formatMessage(id, details) {\r\n        return format.apply(this, [\"{0} - {1}. See:\\n{2}\", id, details, getErrorUrl(id)])\r\n    }\r\n\r\n    function makeError(args) {\r\n        var id = args[0];\r\n        args = args.slice(1);\r\n        var details = formatDetails(id, args);\r\n        var url = getErrorUrl(id);\r\n        var message = formatMessage(id, details);\r\n        return extend(new Error(message), {\r\n            __id: id,\r\n            __details: details,\r\n            url: url\r\n        })\r\n    }\r\n\r\n    function getErrorUrl(id) {\r\n        return ERROR_URL + id\r\n    }\r\n    return exports\r\n}\r\n"]},"metadata":{},"sourceType":"module"}