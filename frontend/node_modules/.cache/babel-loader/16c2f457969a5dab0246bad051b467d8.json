{"ast":null,"code":"/**\r\n * DevExtreme (esm/localization/number.js)\r\n * Version: 21.2.5\r\n * Build date: Mon Jan 17 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dependencyInjector from \"../core/utils/dependency_injector\";\nimport { inArray, find } from \"../core/utils/array\";\nimport { escapeRegExp } from \"../core/utils/common\";\nimport { each } from \"../core/utils/iterator\";\nimport { isPlainObject } from \"../core/utils/type\";\nimport { getFormatter } from \"./ldml/number\";\nimport config from \"../core/config\";\nimport errors from \"../core/errors\";\nimport { toFixed } from \"./utils\";\nimport currencyLocalization from \"./currency\";\nimport intlNumberLocalization from \"./intl/number\";\nvar hasIntl = \"undefined\" !== typeof Intl;\nvar MAX_LARGE_NUMBER_POWER = 4;\nvar DECIMAL_BASE = 10;\nvar NUMERIC_FORMATS = [\"currency\", \"fixedpoint\", \"exponential\", \"percent\", \"decimal\"];\nvar LargeNumberFormatPostfixes = {\n  1: \"K\",\n  2: \"M\",\n  3: \"B\",\n  4: \"T\"\n};\nvar LargeNumberFormatPowers = {\n  largenumber: \"auto\",\n  thousands: 1,\n  millions: 2,\n  billions: 3,\n  trillions: 4\n};\nvar numberLocalization = dependencyInjector({\n  engine: function () {\n    return \"base\";\n  },\n  numericFormats: NUMERIC_FORMATS,\n  defaultLargeNumberFormatPostfixes: LargeNumberFormatPostfixes,\n  _parseNumberFormatString: function (formatType) {\n    var formatObject = {};\n\n    if (!formatType || \"string\" !== typeof formatType) {\n      return;\n    }\n\n    var formatList = formatType.toLowerCase().split(\" \");\n    each(formatList, (index, value) => {\n      if (inArray(value, NUMERIC_FORMATS) > -1) {\n        formatObject.formatType = value;\n      } else if (value in LargeNumberFormatPowers) {\n        formatObject.power = LargeNumberFormatPowers[value];\n      }\n    });\n\n    if (formatObject.power && !formatObject.formatType) {\n      formatObject.formatType = \"fixedpoint\";\n    }\n\n    if (formatObject.formatType) {\n      return formatObject;\n    }\n  },\n  _calculateNumberPower: function (value, base, minPower, maxPower) {\n    var number = Math.abs(value);\n    var power = 0;\n\n    if (number > 1) {\n      while (number && number >= base && (void 0 === maxPower || power < maxPower)) {\n        power++;\n        number /= base;\n      }\n    } else if (number > 0 && number < 1) {\n      while (number < 1 && (void 0 === minPower || power > minPower)) {\n        power--;\n        number *= base;\n      }\n    }\n\n    return power;\n  },\n  _getNumberByPower: function (number, power, base) {\n    var result = number;\n\n    while (power > 0) {\n      result /= base;\n      power--;\n    }\n\n    while (power < 0) {\n      result *= base;\n      power++;\n    }\n\n    return result;\n  },\n  _formatNumber: function (value, formatObject, formatConfig) {\n    if (\"auto\" === formatObject.power) {\n      formatObject.power = this._calculateNumberPower(value, 1e3, 0, MAX_LARGE_NUMBER_POWER);\n    }\n\n    if (formatObject.power) {\n      value = this._getNumberByPower(value, formatObject.power, 1e3);\n    }\n\n    var powerPostfix = this.defaultLargeNumberFormatPostfixes[formatObject.power] || \"\";\n\n    var result = this._formatNumberCore(value, formatObject.formatType, formatConfig);\n\n    result = result.replace(/(\\d|.$)(\\D*)$/, \"$1\" + powerPostfix + \"$2\");\n    return result;\n  },\n  _formatNumberExponential: function (value, formatConfig) {\n    var power = this._calculateNumberPower(value, DECIMAL_BASE);\n\n    var number = this._getNumberByPower(value, power, DECIMAL_BASE);\n\n    if (void 0 === formatConfig.precision) {\n      formatConfig.precision = 1;\n    }\n\n    if (number.toFixed(formatConfig.precision || 0) >= DECIMAL_BASE) {\n      power++;\n      number /= DECIMAL_BASE;\n    }\n\n    var powString = (power >= 0 ? \"+\" : \"\") + power.toString();\n    return this._formatNumberCore(number, \"fixedpoint\", formatConfig) + \"E\" + powString;\n  },\n  _addZeroes: function (value, precision) {\n    var multiplier = Math.pow(10, precision);\n    var sign = value < 0 ? \"-\" : \"\";\n    value = (Math.abs(value) * multiplier >>> 0) / multiplier;\n    var result = value.toString();\n\n    while (result.length < precision) {\n      result = \"0\" + result;\n    }\n\n    return sign + result;\n  },\n  _addGroupSeparators: function (value) {\n    var parts = value.toString().split(\".\");\n    return parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, config().thousandsSeparator) + (parts[1] ? config().decimalSeparator + parts[1] : \"\");\n  },\n  _formatNumberCore: function (value, format, formatConfig) {\n    if (\"exponential\" === format) {\n      return this._formatNumberExponential(value, formatConfig);\n    }\n\n    if (\"decimal\" !== format && null !== formatConfig.precision) {\n      formatConfig.precision = formatConfig.precision || 0;\n    }\n\n    if (\"percent\" === format) {\n      value *= 100;\n    }\n\n    if (void 0 !== formatConfig.precision) {\n      if (\"decimal\" === format) {\n        value = this._addZeroes(value, formatConfig.precision);\n      } else {\n        value = null === formatConfig.precision ? value.toPrecision() : toFixed(value, formatConfig.precision);\n      }\n    }\n\n    if (\"decimal\" !== format) {\n      value = this._addGroupSeparators(value);\n    } else {\n      value = value.toString().replace(\".\", config().decimalSeparator);\n    }\n\n    if (\"percent\" === format) {\n      value += \"%\";\n    }\n\n    return value;\n  },\n  _normalizeFormat: function (format) {\n    if (!format) {\n      return {};\n    }\n\n    if (\"function\" === typeof format) {\n      return format;\n    }\n\n    if (!isPlainObject(format)) {\n      format = {\n        type: format\n      };\n    }\n\n    return format;\n  },\n  _getSeparators: function () {\n    return {\n      decimalSeparator: this.getDecimalSeparator(),\n      thousandsSeparator: this.getThousandsSeparator()\n    };\n  },\n  getThousandsSeparator: function () {\n    return this.format(1e4, \"fixedPoint\")[2];\n  },\n  getDecimalSeparator: function () {\n    return this.format(1.2, {\n      type: \"fixedPoint\",\n      precision: 1\n    })[1];\n  },\n  convertDigits: function (value, toStandard) {\n    var digits = this.format(90, \"decimal\");\n\n    if (\"string\" !== typeof value || \"0\" === digits[1]) {\n      return value;\n    }\n\n    var fromFirstDigit = toStandard ? digits[1] : \"0\";\n    var toFirstDigit = toStandard ? \"0\" : digits[1];\n    var fromLastDigit = toStandard ? digits[0] : \"9\";\n    var regExp = new RegExp(\"[\" + fromFirstDigit + \"-\" + fromLastDigit + \"]\", \"g\");\n    return value.replace(regExp, char => String.fromCharCode(char.charCodeAt(0) + (toFirstDigit.charCodeAt(0) - fromFirstDigit.charCodeAt(0))));\n  },\n  getNegativeEtalonRegExp: function (format) {\n    var separators = this._getSeparators();\n\n    var digitalRegExp = new RegExp(\"[0-9\" + escapeRegExp(separators.decimalSeparator + separators.thousandsSeparator) + \"]+\", \"g\");\n    var negativeEtalon = this.format(-1, format).replace(digitalRegExp, \"1\");\n    [\"\\\\\", \"(\", \")\", \"[\", \"]\", \"*\", \"+\", \"$\", \"^\", \"?\", \"|\", \"{\", \"}\"].forEach(char => {\n      negativeEtalon = negativeEtalon.replace(char, \"\\\\\".concat(char));\n    });\n    negativeEtalon = negativeEtalon.replace(\" \", \"\\\\s\");\n    negativeEtalon = negativeEtalon.replace(\"1\", \".+\");\n    return new RegExp(negativeEtalon, \"g\");\n  },\n  getSign: function (text, format) {\n    if (\"-\" === text.replace(/[^0-9-]/g, \"\").charAt(0)) {\n      return -1;\n    }\n\n    if (!format) {\n      return 1;\n    }\n\n    var negativeEtalon = this.getNegativeEtalonRegExp(format);\n    return text.match(negativeEtalon) ? -1 : 1;\n  },\n  format: function (value, _format) {\n    if (\"number\" !== typeof value) {\n      return value;\n    }\n\n    if (\"number\" === typeof _format) {\n      return value;\n    }\n\n    _format = _format && _format.formatter || _format;\n\n    if (\"function\" === typeof _format) {\n      return _format(value);\n    }\n\n    _format = this._normalizeFormat(_format);\n\n    if (!_format.type) {\n      _format.type = \"decimal\";\n    }\n\n    var numberConfig = this._parseNumberFormatString(_format.type);\n\n    if (!numberConfig) {\n      var formatterConfig = this._getSeparators();\n\n      formatterConfig.unlimitedIntegerDigits = _format.unlimitedIntegerDigits;\n      return this.convertDigits(getFormatter(_format.type, formatterConfig)(value));\n    }\n\n    return this._formatNumber(value, numberConfig, _format);\n  },\n  parse: function (text, format) {\n    if (!text) {\n      return;\n    }\n\n    if (format && format.parser) {\n      return format.parser(text);\n    }\n\n    text = this.convertDigits(text, true);\n\n    if (format && \"string\" !== typeof format) {\n      errors.log(\"W0011\");\n    }\n\n    var decimalSeparator = this.getDecimalSeparator();\n    var regExp = new RegExp(\"[^0-9\" + escapeRegExp(decimalSeparator) + \"]\", \"g\");\n    var cleanedText = text.replace(regExp, \"\").replace(decimalSeparator, \".\").replace(/\\.$/g, \"\");\n\n    if (\".\" === cleanedText || \"\" === cleanedText) {\n      return null;\n    }\n\n    if (this._calcSignificantDigits(cleanedText) > 15) {\n      return NaN;\n    }\n\n    var parsed = +cleanedText * this.getSign(text, format);\n    format = this._normalizeFormat(format);\n\n    var formatConfig = this._parseNumberFormatString(format.type);\n\n    var power = null === formatConfig || void 0 === formatConfig ? void 0 : formatConfig.power;\n\n    if (power) {\n      if (\"auto\" === power) {\n        var match = text.match(/\\d(K|M|B|T)/);\n\n        if (match) {\n          power = find(Object.keys(LargeNumberFormatPostfixes), power => LargeNumberFormatPostfixes[power] === match[1]);\n        }\n      }\n\n      parsed *= Math.pow(10, 3 * power);\n    }\n\n    if (\"percent\" === (null === formatConfig || void 0 === formatConfig ? void 0 : formatConfig.formatType)) {\n      parsed /= 100;\n    }\n\n    return parsed;\n  },\n  _calcSignificantDigits: function (text) {\n    var [integer, fractional] = text.split(\".\");\n\n    var calcDigitsAfterLeadingZeros = digits => {\n      var index = -1;\n\n      for (var i = 0; i < digits.length; i++) {\n        if (\"0\" !== digits[i]) {\n          index = i;\n          break;\n        }\n      }\n\n      return index > -1 ? digits.length - index : 0;\n    };\n\n    var result = 0;\n\n    if (integer) {\n      result += calcDigitsAfterLeadingZeros(integer.split(\"\"));\n    }\n\n    if (fractional) {\n      result += calcDigitsAfterLeadingZeros(fractional.split(\"\").reverse());\n    }\n\n    return result;\n  }\n});\nnumberLocalization.inject(currencyLocalization);\n\nif (hasIntl) {\n  numberLocalization.inject(intlNumberLocalization);\n}\n\nexport default numberLocalization;","map":{"version":3,"sources":["C:/Users/ciara/OneDrive - GMIT/Coin A-Z Test Repo/frontend/node_modules/devextreme/esm/localization/number.js"],"names":["dependencyInjector","inArray","find","escapeRegExp","each","isPlainObject","getFormatter","config","errors","toFixed","currencyLocalization","intlNumberLocalization","hasIntl","Intl","MAX_LARGE_NUMBER_POWER","DECIMAL_BASE","NUMERIC_FORMATS","LargeNumberFormatPostfixes","LargeNumberFormatPowers","largenumber","thousands","millions","billions","trillions","numberLocalization","engine","numericFormats","defaultLargeNumberFormatPostfixes","_parseNumberFormatString","formatType","formatObject","formatList","toLowerCase","split","index","value","power","_calculateNumberPower","base","minPower","maxPower","number","Math","abs","_getNumberByPower","result","_formatNumber","formatConfig","powerPostfix","_formatNumberCore","replace","_formatNumberExponential","precision","powString","toString","_addZeroes","multiplier","pow","sign","length","_addGroupSeparators","parts","thousandsSeparator","decimalSeparator","format","toPrecision","_normalizeFormat","type","_getSeparators","getDecimalSeparator","getThousandsSeparator","convertDigits","toStandard","digits","fromFirstDigit","toFirstDigit","fromLastDigit","regExp","RegExp","char","String","fromCharCode","charCodeAt","getNegativeEtalonRegExp","separators","digitalRegExp","negativeEtalon","forEach","concat","getSign","text","charAt","match","_format","formatter","numberConfig","formatterConfig","unlimitedIntegerDigits","parse","parser","log","cleanedText","_calcSignificantDigits","NaN","parsed","Object","keys","integer","fractional","calcDigitsAfterLeadingZeros","i","reverse","inject"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/localization/number.js)\r\n * Version: 21.2.5\r\n * Build date: Mon Jan 17 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dependencyInjector from \"../core/utils/dependency_injector\";\r\nimport {\r\n    inArray,\r\n    find\r\n} from \"../core/utils/array\";\r\nimport {\r\n    escapeRegExp\r\n} from \"../core/utils/common\";\r\nimport {\r\n    each\r\n} from \"../core/utils/iterator\";\r\nimport {\r\n    isPlainObject\r\n} from \"../core/utils/type\";\r\nimport {\r\n    getFormatter\r\n} from \"./ldml/number\";\r\nimport config from \"../core/config\";\r\nimport errors from \"../core/errors\";\r\nimport {\r\n    toFixed\r\n} from \"./utils\";\r\nimport currencyLocalization from \"./currency\";\r\nimport intlNumberLocalization from \"./intl/number\";\r\nvar hasIntl = \"undefined\" !== typeof Intl;\r\nvar MAX_LARGE_NUMBER_POWER = 4;\r\nvar DECIMAL_BASE = 10;\r\nvar NUMERIC_FORMATS = [\"currency\", \"fixedpoint\", \"exponential\", \"percent\", \"decimal\"];\r\nvar LargeNumberFormatPostfixes = {\r\n    1: \"K\",\r\n    2: \"M\",\r\n    3: \"B\",\r\n    4: \"T\"\r\n};\r\nvar LargeNumberFormatPowers = {\r\n    largenumber: \"auto\",\r\n    thousands: 1,\r\n    millions: 2,\r\n    billions: 3,\r\n    trillions: 4\r\n};\r\nvar numberLocalization = dependencyInjector({\r\n    engine: function() {\r\n        return \"base\"\r\n    },\r\n    numericFormats: NUMERIC_FORMATS,\r\n    defaultLargeNumberFormatPostfixes: LargeNumberFormatPostfixes,\r\n    _parseNumberFormatString: function(formatType) {\r\n        var formatObject = {};\r\n        if (!formatType || \"string\" !== typeof formatType) {\r\n            return\r\n        }\r\n        var formatList = formatType.toLowerCase().split(\" \");\r\n        each(formatList, (index, value) => {\r\n            if (inArray(value, NUMERIC_FORMATS) > -1) {\r\n                formatObject.formatType = value\r\n            } else if (value in LargeNumberFormatPowers) {\r\n                formatObject.power = LargeNumberFormatPowers[value]\r\n            }\r\n        });\r\n        if (formatObject.power && !formatObject.formatType) {\r\n            formatObject.formatType = \"fixedpoint\"\r\n        }\r\n        if (formatObject.formatType) {\r\n            return formatObject\r\n        }\r\n    },\r\n    _calculateNumberPower: function(value, base, minPower, maxPower) {\r\n        var number = Math.abs(value);\r\n        var power = 0;\r\n        if (number > 1) {\r\n            while (number && number >= base && (void 0 === maxPower || power < maxPower)) {\r\n                power++;\r\n                number /= base\r\n            }\r\n        } else if (number > 0 && number < 1) {\r\n            while (number < 1 && (void 0 === minPower || power > minPower)) {\r\n                power--;\r\n                number *= base\r\n            }\r\n        }\r\n        return power\r\n    },\r\n    _getNumberByPower: function(number, power, base) {\r\n        var result = number;\r\n        while (power > 0) {\r\n            result /= base;\r\n            power--\r\n        }\r\n        while (power < 0) {\r\n            result *= base;\r\n            power++\r\n        }\r\n        return result\r\n    },\r\n    _formatNumber: function(value, formatObject, formatConfig) {\r\n        if (\"auto\" === formatObject.power) {\r\n            formatObject.power = this._calculateNumberPower(value, 1e3, 0, MAX_LARGE_NUMBER_POWER)\r\n        }\r\n        if (formatObject.power) {\r\n            value = this._getNumberByPower(value, formatObject.power, 1e3)\r\n        }\r\n        var powerPostfix = this.defaultLargeNumberFormatPostfixes[formatObject.power] || \"\";\r\n        var result = this._formatNumberCore(value, formatObject.formatType, formatConfig);\r\n        result = result.replace(/(\\d|.$)(\\D*)$/, \"$1\" + powerPostfix + \"$2\");\r\n        return result\r\n    },\r\n    _formatNumberExponential: function(value, formatConfig) {\r\n        var power = this._calculateNumberPower(value, DECIMAL_BASE);\r\n        var number = this._getNumberByPower(value, power, DECIMAL_BASE);\r\n        if (void 0 === formatConfig.precision) {\r\n            formatConfig.precision = 1\r\n        }\r\n        if (number.toFixed(formatConfig.precision || 0) >= DECIMAL_BASE) {\r\n            power++;\r\n            number /= DECIMAL_BASE\r\n        }\r\n        var powString = (power >= 0 ? \"+\" : \"\") + power.toString();\r\n        return this._formatNumberCore(number, \"fixedpoint\", formatConfig) + \"E\" + powString\r\n    },\r\n    _addZeroes: function(value, precision) {\r\n        var multiplier = Math.pow(10, precision);\r\n        var sign = value < 0 ? \"-\" : \"\";\r\n        value = (Math.abs(value) * multiplier >>> 0) / multiplier;\r\n        var result = value.toString();\r\n        while (result.length < precision) {\r\n            result = \"0\" + result\r\n        }\r\n        return sign + result\r\n    },\r\n    _addGroupSeparators: function(value) {\r\n        var parts = value.toString().split(\".\");\r\n        return parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, config().thousandsSeparator) + (parts[1] ? config().decimalSeparator + parts[1] : \"\")\r\n    },\r\n    _formatNumberCore: function(value, format, formatConfig) {\r\n        if (\"exponential\" === format) {\r\n            return this._formatNumberExponential(value, formatConfig)\r\n        }\r\n        if (\"decimal\" !== format && null !== formatConfig.precision) {\r\n            formatConfig.precision = formatConfig.precision || 0\r\n        }\r\n        if (\"percent\" === format) {\r\n            value *= 100\r\n        }\r\n        if (void 0 !== formatConfig.precision) {\r\n            if (\"decimal\" === format) {\r\n                value = this._addZeroes(value, formatConfig.precision)\r\n            } else {\r\n                value = null === formatConfig.precision ? value.toPrecision() : toFixed(value, formatConfig.precision)\r\n            }\r\n        }\r\n        if (\"decimal\" !== format) {\r\n            value = this._addGroupSeparators(value)\r\n        } else {\r\n            value = value.toString().replace(\".\", config().decimalSeparator)\r\n        }\r\n        if (\"percent\" === format) {\r\n            value += \"%\"\r\n        }\r\n        return value\r\n    },\r\n    _normalizeFormat: function(format) {\r\n        if (!format) {\r\n            return {}\r\n        }\r\n        if (\"function\" === typeof format) {\r\n            return format\r\n        }\r\n        if (!isPlainObject(format)) {\r\n            format = {\r\n                type: format\r\n            }\r\n        }\r\n        return format\r\n    },\r\n    _getSeparators: function() {\r\n        return {\r\n            decimalSeparator: this.getDecimalSeparator(),\r\n            thousandsSeparator: this.getThousandsSeparator()\r\n        }\r\n    },\r\n    getThousandsSeparator: function() {\r\n        return this.format(1e4, \"fixedPoint\")[2]\r\n    },\r\n    getDecimalSeparator: function() {\r\n        return this.format(1.2, {\r\n            type: \"fixedPoint\",\r\n            precision: 1\r\n        })[1]\r\n    },\r\n    convertDigits: function(value, toStandard) {\r\n        var digits = this.format(90, \"decimal\");\r\n        if (\"string\" !== typeof value || \"0\" === digits[1]) {\r\n            return value\r\n        }\r\n        var fromFirstDigit = toStandard ? digits[1] : \"0\";\r\n        var toFirstDigit = toStandard ? \"0\" : digits[1];\r\n        var fromLastDigit = toStandard ? digits[0] : \"9\";\r\n        var regExp = new RegExp(\"[\" + fromFirstDigit + \"-\" + fromLastDigit + \"]\", \"g\");\r\n        return value.replace(regExp, char => String.fromCharCode(char.charCodeAt(0) + (toFirstDigit.charCodeAt(0) - fromFirstDigit.charCodeAt(0))))\r\n    },\r\n    getNegativeEtalonRegExp: function(format) {\r\n        var separators = this._getSeparators();\r\n        var digitalRegExp = new RegExp(\"[0-9\" + escapeRegExp(separators.decimalSeparator + separators.thousandsSeparator) + \"]+\", \"g\");\r\n        var negativeEtalon = this.format(-1, format).replace(digitalRegExp, \"1\");\r\n        [\"\\\\\", \"(\", \")\", \"[\", \"]\", \"*\", \"+\", \"$\", \"^\", \"?\", \"|\", \"{\", \"}\"].forEach(char => {\r\n            negativeEtalon = negativeEtalon.replace(char, \"\\\\\".concat(char))\r\n        });\r\n        negativeEtalon = negativeEtalon.replace(\" \", \"\\\\s\");\r\n        negativeEtalon = negativeEtalon.replace(\"1\", \".+\");\r\n        return new RegExp(negativeEtalon, \"g\")\r\n    },\r\n    getSign: function(text, format) {\r\n        if (\"-\" === text.replace(/[^0-9-]/g, \"\").charAt(0)) {\r\n            return -1\r\n        }\r\n        if (!format) {\r\n            return 1\r\n        }\r\n        var negativeEtalon = this.getNegativeEtalonRegExp(format);\r\n        return text.match(negativeEtalon) ? -1 : 1\r\n    },\r\n    format: function(value, _format) {\r\n        if (\"number\" !== typeof value) {\r\n            return value\r\n        }\r\n        if (\"number\" === typeof _format) {\r\n            return value\r\n        }\r\n        _format = _format && _format.formatter || _format;\r\n        if (\"function\" === typeof _format) {\r\n            return _format(value)\r\n        }\r\n        _format = this._normalizeFormat(_format);\r\n        if (!_format.type) {\r\n            _format.type = \"decimal\"\r\n        }\r\n        var numberConfig = this._parseNumberFormatString(_format.type);\r\n        if (!numberConfig) {\r\n            var formatterConfig = this._getSeparators();\r\n            formatterConfig.unlimitedIntegerDigits = _format.unlimitedIntegerDigits;\r\n            return this.convertDigits(getFormatter(_format.type, formatterConfig)(value))\r\n        }\r\n        return this._formatNumber(value, numberConfig, _format)\r\n    },\r\n    parse: function(text, format) {\r\n        if (!text) {\r\n            return\r\n        }\r\n        if (format && format.parser) {\r\n            return format.parser(text)\r\n        }\r\n        text = this.convertDigits(text, true);\r\n        if (format && \"string\" !== typeof format) {\r\n            errors.log(\"W0011\")\r\n        }\r\n        var decimalSeparator = this.getDecimalSeparator();\r\n        var regExp = new RegExp(\"[^0-9\" + escapeRegExp(decimalSeparator) + \"]\", \"g\");\r\n        var cleanedText = text.replace(regExp, \"\").replace(decimalSeparator, \".\").replace(/\\.$/g, \"\");\r\n        if (\".\" === cleanedText || \"\" === cleanedText) {\r\n            return null\r\n        }\r\n        if (this._calcSignificantDigits(cleanedText) > 15) {\r\n            return NaN\r\n        }\r\n        var parsed = +cleanedText * this.getSign(text, format);\r\n        format = this._normalizeFormat(format);\r\n        var formatConfig = this._parseNumberFormatString(format.type);\r\n        var power = null === formatConfig || void 0 === formatConfig ? void 0 : formatConfig.power;\r\n        if (power) {\r\n            if (\"auto\" === power) {\r\n                var match = text.match(/\\d(K|M|B|T)/);\r\n                if (match) {\r\n                    power = find(Object.keys(LargeNumberFormatPostfixes), power => LargeNumberFormatPostfixes[power] === match[1])\r\n                }\r\n            }\r\n            parsed *= Math.pow(10, 3 * power)\r\n        }\r\n        if (\"percent\" === (null === formatConfig || void 0 === formatConfig ? void 0 : formatConfig.formatType)) {\r\n            parsed /= 100\r\n        }\r\n        return parsed\r\n    },\r\n    _calcSignificantDigits: function(text) {\r\n        var [integer, fractional] = text.split(\".\");\r\n        var calcDigitsAfterLeadingZeros = digits => {\r\n            var index = -1;\r\n            for (var i = 0; i < digits.length; i++) {\r\n                if (\"0\" !== digits[i]) {\r\n                    index = i;\r\n                    break\r\n                }\r\n            }\r\n            return index > -1 ? digits.length - index : 0\r\n        };\r\n        var result = 0;\r\n        if (integer) {\r\n            result += calcDigitsAfterLeadingZeros(integer.split(\"\"))\r\n        }\r\n        if (fractional) {\r\n            result += calcDigitsAfterLeadingZeros(fractional.split(\"\").reverse())\r\n        }\r\n        return result\r\n    }\r\n});\r\nnumberLocalization.inject(currencyLocalization);\r\nif (hasIntl) {\r\n    numberLocalization.inject(intlNumberLocalization)\r\n}\r\nexport default numberLocalization;\r\n"]},"metadata":{},"sourceType":"module"}