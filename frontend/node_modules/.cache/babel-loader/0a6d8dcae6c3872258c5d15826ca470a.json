{"ast":null,"code":"import axios from 'axios';\nimport { API_URL } from \"../Constants\";\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get(`${API_URL}/basicauth`, {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  executeJwtAuthenticationService(username, password) {\n    return axios.post(`${API_URL}/authenticate`, {\n      username,\n      password\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  }\n\n  registeredSuccessfulLogin(username, password) {\n    //let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password)\n    //console.log('registerSuccessfulLogin');\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createJwtToken(token));\n  }\n\n  createJwtToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/ciara/OneDrive - GMIT/Coin A-Z Test/frontend/src/components/AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","executeJwtAuthenticationService","post","window","btoa","registeredSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","registerSuccessfulLoginForJwt","token","createJwtToken","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,cAAtB;AAEA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC;;AAEP,MAAMC,qBAAN,CAA2B;AACvBC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAoB;AACjD,WAAON,KAAK,CAACO,GAAN,CAAW,GAAEN,OAAQ,YAArB,EACH;AAACO,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC;AAAhB;AAAV,KADG,CAAP;AAEH;;AAEDK,EAAAA,+BAA+B,CAACN,QAAD,EAAWC,QAAX,EAAoB;AAC/C,WAAON,KAAK,CAACY,IAAN,CAAY,GAAEX,OAAQ,eAAtB,EAAsC;AACzCI,MAAAA,QADyC;AAEzCC,MAAAA;AAFyC,KAAtC,CAAP;AAIH;;AAEDI,EAAAA,oBAAoB,CAACL,QAAD,EAAWC,QAAX,EAAoB;AACpC,WAAO,WAAWO,MAAM,CAACC,IAAP,CAAYT,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH;;AAEDS,EAAAA,yBAAyB,CAACV,QAAD,EAAUC,QAAV,EAAmB;AACxC;AACA;AACAU,IAAAA,cAAc,CAACC,OAAf,CAAuBf,gCAAvB,EAAyDG,QAAzD;AACA,SAAKa,sBAAL,CAA4B,KAAKR,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC,CAA5B;AACH;;AAEDa,EAAAA,6BAA6B,CAACd,QAAD,EAAUe,KAAV,EAAgB;AACzCJ,IAAAA,cAAc,CAACC,OAAf,CAAuBf,gCAAvB,EAAyDG,QAAzD;AACA,SAAKa,sBAAL,CAA4B,KAAKG,cAAL,CAAoBD,KAApB,CAA5B;AACH;;AAEDC,EAAAA,cAAc,CAACD,KAAD,EAAO;AACjB,WAAO,YAAYA,KAAnB;AACH;;AAEDE,EAAAA,MAAM,GAAG;AACLN,IAAAA,cAAc,CAACO,UAAf,CAA0BrB,gCAA1B;AACH;;AAEDsB,EAAAA,cAAc,GAAE;AACZ,QAAIC,IAAI,GAAGT,cAAc,CAACU,OAAf,CAAuBxB,gCAAvB,CAAX;AACA,QAAGuB,IAAI,KAAG,IAAV,EAAgB,OAAO,KAAP;AAChB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGT,cAAc,CAACU,OAAf,CAAuBxB,gCAAvB,CAAX;AACA,QAAGuB,IAAI,KAAG,IAAV,EAAgB,OAAO,EAAP;AAChB,WAAOA,IAAP;AACH;;AAEDP,EAAAA,sBAAsB,CAACE,KAAD,EAAO;AAEzBpB,IAAAA,KAAK,CAAC4B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAG,KAAKP,cAAL,EAAH,EAA0B;AACtBO,QAAAA,MAAM,CAACvB,OAAP,CAAeC,aAAf,GAA+BW,KAA/B;AACH;;AACD,aAAOW,MAAP;AACH,KANL;AAQH;;AA3DsB;;AA8D3B,eAAe,IAAI5B,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\r\nimport {API_URL} from \"../Constants\";\r\n\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\r\n\r\nclass AuthenticationService{\r\n    executeBasicAuthenticationService(username, password){\r\n        return axios.get(`${API_URL}/basicauth`,\r\n            {headers: {authorization: this.createBasicAuthToken(username, password)}})\r\n    }\r\n\r\n    executeJwtAuthenticationService(username, password){\r\n        return axios.post(`${API_URL}/authenticate`, {\r\n            username,\r\n            password\r\n            })\r\n    }\r\n\r\n    createBasicAuthToken(username, password){\r\n        return 'Basic ' + window.btoa(username + \":\" + password)\r\n    }\r\n\r\n    registeredSuccessfulLogin(username,password){\r\n        //let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password)\r\n        //console.log('registerSuccessfulLogin');\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\r\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\r\n    }\r\n\r\n    registerSuccessfulLoginForJwt(username,token){\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\r\n        this.setupAxiosInterceptors(this.createJwtToken(token))\r\n    }\r\n\r\n    createJwtToken(token){\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n    logout() {\r\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n    }\r\n\r\n    isUserLoggedIn(){\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n        if(user===null) return false\r\n        return true\r\n    }\r\n\r\n    getLoggedInUserName() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n        if(user===null) return ''\r\n        return user\r\n    }\r\n\r\n    setupAxiosInterceptors(token){\r\n\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if(this.isUserLoggedIn()) {\r\n                    config.headers.authorization = token\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}