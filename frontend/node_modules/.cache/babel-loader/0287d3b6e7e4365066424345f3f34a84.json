{"ast":null,"code":"/**\r\n * DevExtreme (esm/localization/message.js)\r\n * Version: 21.2.5\r\n * Build date: Mon Jan 17 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../core/renderer\";\nimport dependencyInjector from \"../core/utils/dependency_injector\";\nimport { extend } from \"../core/utils/extend\";\nimport { each } from \"../core/utils/iterator\";\nimport { format as stringFormat } from \"../core/utils/string\";\nimport { humanize } from \"../core/utils/inflector\";\nimport coreLocalization from \"./core\";\nimport { defaultMessages } from \"./default_messages\";\nvar baseDictionary = extend(true, {}, defaultMessages);\n\nvar getDataByLocale = (localeData, locale) => localeData[locale] || {};\n\nvar newMessages = {};\nvar messageLocalization = dependencyInjector({\n  engine: function () {\n    return \"base\";\n  },\n  _dictionary: baseDictionary,\n  load: function (messages) {\n    extend(true, this._dictionary, messages);\n  },\n  _localizablePrefix: \"@\",\n  setup: function (localizablePrefix) {\n    this._localizablePrefix = localizablePrefix;\n  },\n  localizeString: function (text) {\n    var that = this;\n    var regex = new RegExp(\"(^|[^a-zA-Z_0-9\" + that._localizablePrefix + \"-]+)(\" + that._localizablePrefix + \"{1,2})([a-zA-Z_0-9-]+)\", \"g\");\n    var escapeString = that._localizablePrefix + that._localizablePrefix;\n    return text.replace(regex, (str, prefix, escape, localizationKey) => {\n      var defaultResult = that._localizablePrefix + localizationKey;\n      var result;\n\n      if (escape !== escapeString) {\n        result = that.format(localizationKey);\n      }\n\n      if (!result) {\n        newMessages[localizationKey] = humanize(localizationKey);\n      }\n\n      return prefix + (result || defaultResult);\n    });\n  },\n  localizeNode: function (node) {\n    var that = this;\n    $(node).each((index, nodeItem) => {\n      if (!nodeItem.nodeType) {\n        return;\n      }\n\n      if (3 === nodeItem.nodeType) {\n        nodeItem.nodeValue = that.localizeString(nodeItem.nodeValue);\n      } else if (!$(nodeItem).is(\"iframe\")) {\n        each(nodeItem.attributes || [], (index, attr) => {\n          if (\"string\" === typeof attr.value) {\n            var localizedValue = that.localizeString(attr.value);\n\n            if (attr.value !== localizedValue) {\n              attr.value = localizedValue;\n            }\n          }\n        });\n        $(nodeItem).contents().each((index, node) => {\n          that.localizeNode(node);\n        });\n      }\n    });\n  },\n  getMessagesByLocales: function () {\n    return this._dictionary;\n  },\n  getDictionary: function (onlyNew) {\n    if (onlyNew) {\n      return newMessages;\n    }\n\n    return extend({}, newMessages, this.getMessagesByLocales()[coreLocalization.locale()]);\n  },\n  getFormatter: function (key) {\n    return this._getFormatterBase(key) || this._getFormatterBase(key, \"en\");\n  },\n  _getFormatterBase: function (key, locale) {\n    var message = coreLocalization.getValueByClosestLocale(locale => getDataByLocale(this._dictionary, locale)[key]);\n\n    if (message) {\n      return function () {\n        var args = 1 === arguments.length && Array.isArray(arguments[0]) ? arguments[0].slice(0) : Array.prototype.slice.call(arguments, 0);\n        args.unshift(message);\n        return stringFormat.apply(this, args);\n      };\n    }\n  },\n  format: function (key) {\n    var formatter = this.getFormatter(key);\n    var values = Array.prototype.slice.call(arguments, 1);\n    return formatter && formatter.apply(this, values) || \"\";\n  }\n});\nexport default messageLocalization;","map":{"version":3,"sources":["C:/Users/ciara/OneDrive - GMIT/Coin A-Z Test Repo/frontend/node_modules/devextreme/esm/localization/message.js"],"names":["$","dependencyInjector","extend","each","format","stringFormat","humanize","coreLocalization","defaultMessages","baseDictionary","getDataByLocale","localeData","locale","newMessages","messageLocalization","engine","_dictionary","load","messages","_localizablePrefix","setup","localizablePrefix","localizeString","text","that","regex","RegExp","escapeString","replace","str","prefix","escape","localizationKey","defaultResult","result","localizeNode","node","index","nodeItem","nodeType","nodeValue","is","attributes","attr","value","localizedValue","contents","getMessagesByLocales","getDictionary","onlyNew","getFormatter","key","_getFormatterBase","message","getValueByClosestLocale","args","arguments","length","Array","isArray","slice","prototype","call","unshift","apply","formatter","values"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/localization/message.js)\r\n * Version: 21.2.5\r\n * Build date: Mon Jan 17 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../core/renderer\";\r\nimport dependencyInjector from \"../core/utils/dependency_injector\";\r\nimport {\r\n    extend\r\n} from \"../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../core/utils/iterator\";\r\nimport {\r\n    format as stringFormat\r\n} from \"../core/utils/string\";\r\nimport {\r\n    humanize\r\n} from \"../core/utils/inflector\";\r\nimport coreLocalization from \"./core\";\r\nimport {\r\n    defaultMessages\r\n} from \"./default_messages\";\r\nvar baseDictionary = extend(true, {}, defaultMessages);\r\nvar getDataByLocale = (localeData, locale) => localeData[locale] || {};\r\nvar newMessages = {};\r\nvar messageLocalization = dependencyInjector({\r\n    engine: function() {\r\n        return \"base\"\r\n    },\r\n    _dictionary: baseDictionary,\r\n    load: function(messages) {\r\n        extend(true, this._dictionary, messages)\r\n    },\r\n    _localizablePrefix: \"@\",\r\n    setup: function(localizablePrefix) {\r\n        this._localizablePrefix = localizablePrefix\r\n    },\r\n    localizeString: function(text) {\r\n        var that = this;\r\n        var regex = new RegExp(\"(^|[^a-zA-Z_0-9\" + that._localizablePrefix + \"-]+)(\" + that._localizablePrefix + \"{1,2})([a-zA-Z_0-9-]+)\", \"g\");\r\n        var escapeString = that._localizablePrefix + that._localizablePrefix;\r\n        return text.replace(regex, (str, prefix, escape, localizationKey) => {\r\n            var defaultResult = that._localizablePrefix + localizationKey;\r\n            var result;\r\n            if (escape !== escapeString) {\r\n                result = that.format(localizationKey)\r\n            }\r\n            if (!result) {\r\n                newMessages[localizationKey] = humanize(localizationKey)\r\n            }\r\n            return prefix + (result || defaultResult)\r\n        })\r\n    },\r\n    localizeNode: function(node) {\r\n        var that = this;\r\n        $(node).each((index, nodeItem) => {\r\n            if (!nodeItem.nodeType) {\r\n                return\r\n            }\r\n            if (3 === nodeItem.nodeType) {\r\n                nodeItem.nodeValue = that.localizeString(nodeItem.nodeValue)\r\n            } else if (!$(nodeItem).is(\"iframe\")) {\r\n                each(nodeItem.attributes || [], (index, attr) => {\r\n                    if (\"string\" === typeof attr.value) {\r\n                        var localizedValue = that.localizeString(attr.value);\r\n                        if (attr.value !== localizedValue) {\r\n                            attr.value = localizedValue\r\n                        }\r\n                    }\r\n                });\r\n                $(nodeItem).contents().each((index, node) => {\r\n                    that.localizeNode(node)\r\n                })\r\n            }\r\n        })\r\n    },\r\n    getMessagesByLocales: function() {\r\n        return this._dictionary\r\n    },\r\n    getDictionary: function(onlyNew) {\r\n        if (onlyNew) {\r\n            return newMessages\r\n        }\r\n        return extend({}, newMessages, this.getMessagesByLocales()[coreLocalization.locale()])\r\n    },\r\n    getFormatter: function(key) {\r\n        return this._getFormatterBase(key) || this._getFormatterBase(key, \"en\")\r\n    },\r\n    _getFormatterBase: function(key, locale) {\r\n        var message = coreLocalization.getValueByClosestLocale(locale => getDataByLocale(this._dictionary, locale)[key]);\r\n        if (message) {\r\n            return function() {\r\n                var args = 1 === arguments.length && Array.isArray(arguments[0]) ? arguments[0].slice(0) : Array.prototype.slice.call(arguments, 0);\r\n                args.unshift(message);\r\n                return stringFormat.apply(this, args)\r\n            }\r\n        }\r\n    },\r\n    format: function(key) {\r\n        var formatter = this.getFormatter(key);\r\n        var values = Array.prototype.slice.call(arguments, 1);\r\n        return formatter && formatter.apply(this, values) || \"\"\r\n    }\r\n});\r\nexport default messageLocalization;\r\n"]},"metadata":{},"sourceType":"module"}