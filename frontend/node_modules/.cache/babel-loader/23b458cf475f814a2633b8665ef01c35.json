{"ast":null,"code":"/**\r\n * DevExtreme (esm/events/pointer/observer.js)\r\n * Version: 21.2.5\r\n * Build date: Mon Jan 17 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { each } from \"../../core/utils/iterator\";\nimport readyCallbacks from \"../../core/utils/ready_callbacks\";\nimport domAdapter from \"../../core/dom_adapter\";\n\nvar addEventsListener = function (events, handler) {\n  readyCallbacks.add(function () {\n    events.split(\" \").forEach(function (event) {\n      domAdapter.listen(domAdapter.getDocument(), event, handler, true);\n    });\n  });\n};\n\nvar Observer = function (eventMap, pointerEquals, onPointerAdding) {\n  onPointerAdding = onPointerAdding || function () {};\n\n  var pointers = [];\n\n  var getPointerIndex = function (e) {\n    var index = -1;\n    each(pointers, function (i, pointer) {\n      if (!pointerEquals(e, pointer)) {\n        return true;\n      }\n\n      index = i;\n      return false;\n    });\n    return index;\n  };\n\n  var removePointer = function (e) {\n    var index = getPointerIndex(e);\n\n    if (index > -1) {\n      pointers.splice(index, 1);\n    }\n  };\n\n  addEventsListener(eventMap.dxpointerdown, function (e) {\n    if (-1 === getPointerIndex(e)) {\n      onPointerAdding(e);\n      pointers.push(e);\n    }\n  });\n  addEventsListener(eventMap.dxpointermove, function (e) {\n    pointers[getPointerIndex(e)] = e;\n  });\n  addEventsListener(eventMap.dxpointerup, removePointer);\n  addEventsListener(eventMap.dxpointercancel, removePointer);\n\n  this.pointers = function () {\n    return pointers;\n  };\n\n  this.reset = function () {\n    pointers = [];\n  };\n};\n\nexport default Observer;","map":{"version":3,"sources":["C:/Users/ciara/OneDrive - GMIT/Coin A-Z Test Repo/frontend/node_modules/devextreme/esm/events/pointer/observer.js"],"names":["each","readyCallbacks","domAdapter","addEventsListener","events","handler","add","split","forEach","event","listen","getDocument","Observer","eventMap","pointerEquals","onPointerAdding","pointers","getPointerIndex","e","index","i","pointer","removePointer","splice","dxpointerdown","push","dxpointermove","dxpointerup","dxpointercancel","reset"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACIA,IADJ,QAEO,2BAFP;AAGA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,UAAP,MAAuB,wBAAvB;;AACA,IAAIC,iBAAiB,GAAG,UAASC,MAAT,EAAiBC,OAAjB,EAA0B;AAC9CJ,EAAAA,cAAc,CAACK,GAAf,CAAoB,YAAW;AAC3BF,IAAAA,MAAM,CAACG,KAAP,CAAa,GAAb,EAAkBC,OAAlB,CAA2B,UAASC,KAAT,EAAgB;AACvCP,MAAAA,UAAU,CAACQ,MAAX,CAAkBR,UAAU,CAACS,WAAX,EAAlB,EAA4CF,KAA5C,EAAmDJ,OAAnD,EAA4D,IAA5D;AACH,KAFD;AAGH,GAJD;AAKH,CAND;;AAOA,IAAIO,QAAQ,GAAG,UAASC,QAAT,EAAmBC,aAAnB,EAAkCC,eAAlC,EAAmD;AAC9DA,EAAAA,eAAe,GAAGA,eAAe,IAAI,YAAW,CAAE,CAAlD;;AACA,MAAIC,QAAQ,GAAG,EAAf;;AACA,MAAIC,eAAe,GAAG,UAASC,CAAT,EAAY;AAC9B,QAAIC,KAAK,GAAG,CAAC,CAAb;AACAnB,IAAAA,IAAI,CAACgB,QAAD,EAAY,UAASI,CAAT,EAAYC,OAAZ,EAAqB;AACjC,UAAI,CAACP,aAAa,CAACI,CAAD,EAAIG,OAAJ,CAAlB,EAAgC;AAC5B,eAAO,IAAP;AACH;;AACDF,MAAAA,KAAK,GAAGC,CAAR;AACA,aAAO,KAAP;AACH,KANG,CAAJ;AAOA,WAAOD,KAAP;AACH,GAVD;;AAWA,MAAIG,aAAa,GAAG,UAASJ,CAAT,EAAY;AAC5B,QAAIC,KAAK,GAAGF,eAAe,CAACC,CAAD,CAA3B;;AACA,QAAIC,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZH,MAAAA,QAAQ,CAACO,MAAT,CAAgBJ,KAAhB,EAAuB,CAAvB;AACH;AACJ,GALD;;AAMAhB,EAAAA,iBAAiB,CAACU,QAAQ,CAACW,aAAV,EAA0B,UAASN,CAAT,EAAY;AACnD,QAAI,CAAC,CAAD,KAAOD,eAAe,CAACC,CAAD,CAA1B,EAA+B;AAC3BH,MAAAA,eAAe,CAACG,CAAD,CAAf;AACAF,MAAAA,QAAQ,CAACS,IAAT,CAAcP,CAAd;AACH;AACJ,GALgB,CAAjB;AAMAf,EAAAA,iBAAiB,CAACU,QAAQ,CAACa,aAAV,EAA0B,UAASR,CAAT,EAAY;AACnDF,IAAAA,QAAQ,CAACC,eAAe,CAACC,CAAD,CAAhB,CAAR,GAA+BA,CAA/B;AACH,GAFgB,CAAjB;AAGAf,EAAAA,iBAAiB,CAACU,QAAQ,CAACc,WAAV,EAAuBL,aAAvB,CAAjB;AACAnB,EAAAA,iBAAiB,CAACU,QAAQ,CAACe,eAAV,EAA2BN,aAA3B,CAAjB;;AACA,OAAKN,QAAL,GAAgB,YAAW;AACvB,WAAOA,QAAP;AACH,GAFD;;AAGA,OAAKa,KAAL,GAAa,YAAW;AACpBb,IAAAA,QAAQ,GAAG,EAAX;AACH,GAFD;AAGH,CArCD;;AAsCA,eAAeJ,QAAf","sourcesContent":["/**\r\n * DevExtreme (esm/events/pointer/observer.js)\r\n * Version: 21.2.5\r\n * Build date: Mon Jan 17 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport readyCallbacks from \"../../core/utils/ready_callbacks\";\r\nimport domAdapter from \"../../core/dom_adapter\";\r\nvar addEventsListener = function(events, handler) {\r\n    readyCallbacks.add((function() {\r\n        events.split(\" \").forEach((function(event) {\r\n            domAdapter.listen(domAdapter.getDocument(), event, handler, true)\r\n        }))\r\n    }))\r\n};\r\nvar Observer = function(eventMap, pointerEquals, onPointerAdding) {\r\n    onPointerAdding = onPointerAdding || function() {};\r\n    var pointers = [];\r\n    var getPointerIndex = function(e) {\r\n        var index = -1;\r\n        each(pointers, (function(i, pointer) {\r\n            if (!pointerEquals(e, pointer)) {\r\n                return true\r\n            }\r\n            index = i;\r\n            return false\r\n        }));\r\n        return index\r\n    };\r\n    var removePointer = function(e) {\r\n        var index = getPointerIndex(e);\r\n        if (index > -1) {\r\n            pointers.splice(index, 1)\r\n        }\r\n    };\r\n    addEventsListener(eventMap.dxpointerdown, (function(e) {\r\n        if (-1 === getPointerIndex(e)) {\r\n            onPointerAdding(e);\r\n            pointers.push(e)\r\n        }\r\n    }));\r\n    addEventsListener(eventMap.dxpointermove, (function(e) {\r\n        pointers[getPointerIndex(e)] = e\r\n    }));\r\n    addEventsListener(eventMap.dxpointerup, removePointer);\r\n    addEventsListener(eventMap.dxpointercancel, removePointer);\r\n    this.pointers = function() {\r\n        return pointers\r\n    };\r\n    this.reset = function() {\r\n        pointers = []\r\n    }\r\n};\r\nexport default Observer;\r\n"]},"metadata":{},"sourceType":"module"}