{"ast":null,"code":"/**\r\n * DevExtreme (esm/localization/ldml/number.js)\r\n * Version: 21.2.5\r\n * Build date: Mon Jan 17 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { fitIntoRange } from \"../../core/utils/math\";\nimport { toFixed } from \"../utils\";\nvar DEFAULT_CONFIG = {\n  thousandsSeparator: \",\",\n  decimalSeparator: \".\"\n};\nvar ESCAPING_CHAR = \"'\";\nvar MAXIMUM_NUMBER_LENGTH = 15;\n\nfunction getGroupSizes(formatString) {\n  return formatString.split(\",\").slice(1).map(function (str) {\n    return str.split(\"\").filter(function (char) {\n      return \"#\" === char || \"0\" === char;\n    }).length;\n  });\n}\n\nfunction getSignParts(format) {\n  var signParts = format.split(\";\");\n\n  if (1 === signParts.length) {\n    signParts.push(\"-\" + signParts[0]);\n  }\n\n  return signParts;\n}\n\nfunction reverseString(str) {\n  return str.toString().split(\"\").reverse().join(\"\");\n}\n\nfunction isPercentFormat(format) {\n  return -1 !== format.indexOf(\"%\") && !format.match(/'[^']*%[^']*'/g);\n}\n\nfunction removeStubs(str) {\n  return str.replace(/'.+'/g, \"\");\n}\n\nfunction getNonRequiredDigitCount(floatFormat) {\n  if (!floatFormat) {\n    return 0;\n  }\n\n  var format = removeStubs(floatFormat);\n  return format.length - format.replace(/[#]/g, \"\").length;\n}\n\nfunction getRequiredDigitCount(floatFormat) {\n  if (!floatFormat) {\n    return 0;\n  }\n\n  var format = removeStubs(floatFormat);\n  return format.length - format.replace(/[0]/g, \"\").length;\n}\n\nfunction normalizeValueString(valuePart, minDigitCount, maxDigitCount) {\n  if (!valuePart) {\n    return \"\";\n  }\n\n  if (valuePart.length > maxDigitCount) {\n    valuePart = valuePart.substr(0, maxDigitCount);\n  }\n\n  while (valuePart.length > minDigitCount && \"0\" === valuePart.slice(-1)) {\n    valuePart = valuePart.substr(0, valuePart.length - 1);\n  }\n\n  while (valuePart.length < minDigitCount) {\n    valuePart += \"0\";\n  }\n\n  return valuePart;\n}\n\nfunction applyGroups(valueString, groupSizes, thousandsSeparator) {\n  if (!groupSizes.length) {\n    return valueString;\n  }\n\n  var groups = [];\n  var index = 0;\n\n  while (valueString) {\n    var groupSize = groupSizes[index];\n\n    if (!groupSize) {\n      break;\n    }\n\n    groups.push(valueString.slice(0, groupSize));\n    valueString = valueString.slice(groupSize);\n\n    if (index < groupSizes.length - 1) {\n      index++;\n    }\n  }\n\n  return groups.join(thousandsSeparator);\n}\n\nfunction formatNumberPart(format, valueString) {\n  return format.split(ESCAPING_CHAR).map(function (formatPart, escapeIndex) {\n    var isEscape = escapeIndex % 2;\n\n    if (!formatPart && isEscape) {\n      return ESCAPING_CHAR;\n    }\n\n    return isEscape ? formatPart : formatPart.replace(/[,#0]+/, valueString);\n  }).join(\"\");\n}\n\nfunction getFloatPointIndex(format) {\n  var isEscape = false;\n\n  for (var index = 0; index < format.length; index++) {\n    if (\"'\" === format[index]) {\n      isEscape = !isEscape;\n    }\n\n    if (\".\" === format[index] && !isEscape) {\n      return index;\n    }\n  }\n\n  return format.length;\n}\n\nexport function getFormatter(format, config) {\n  config = config || DEFAULT_CONFIG;\n  return function (value) {\n    if (\"number\" !== typeof value || isNaN(value)) {\n      return \"\";\n    }\n\n    var signFormatParts = getSignParts(format);\n    var isPositiveZero = 1 / value === 1 / 0;\n    var isPositive = value > 0 || isPositiveZero;\n    var numberFormat = signFormatParts[isPositive ? 0 : 1];\n\n    if (isPercentFormat(numberFormat)) {\n      value *= 100;\n    }\n\n    if (!isPositive) {\n      value = -value;\n    }\n\n    var floatPointIndex = getFloatPointIndex(numberFormat);\n    var floatFormatParts = [numberFormat.substr(0, floatPointIndex), numberFormat.substr(floatPointIndex + 1)];\n    var minFloatPrecision = getRequiredDigitCount(floatFormatParts[1]);\n    var maxFloatPrecision = minFloatPrecision + getNonRequiredDigitCount(floatFormatParts[1]);\n    var minIntegerPrecision = getRequiredDigitCount(floatFormatParts[0]);\n    var maxIntegerPrecision = getNonRequiredDigitCount(floatFormatParts[0]) || config.unlimitedIntegerDigits ? void 0 : minIntegerPrecision;\n    var integerLength = Math.floor(value).toString().length;\n    var floatPrecision = fitIntoRange(maxFloatPrecision, 0, MAXIMUM_NUMBER_LENGTH - integerLength);\n    var groupSizes = getGroupSizes(floatFormatParts[0]).reverse();\n    var valueParts = toFixed(value, floatPrecision < 0 ? 0 : floatPrecision).split(\".\");\n    var valueIntegerPart = normalizeValueString(reverseString(valueParts[0]), minIntegerPrecision, maxIntegerPrecision);\n    var valueFloatPart = normalizeValueString(valueParts[1], minFloatPrecision, maxFloatPrecision);\n    valueIntegerPart = applyGroups(valueIntegerPart, groupSizes, config.thousandsSeparator);\n    var integerString = reverseString(formatNumberPart(reverseString(floatFormatParts[0]), valueIntegerPart));\n    var floatString = maxFloatPrecision ? formatNumberPart(floatFormatParts[1], valueFloatPart) : \"\";\n    var result = integerString + (floatString.match(/\\d/) ? config.decimalSeparator : \"\") + floatString;\n    return result;\n  };\n}\n\nfunction parseValue(text, isPercent, isNegative) {\n  var value = (isPercent ? .01 : 1) * parseFloat(text) || 0;\n  return isNegative ? -value : value;\n}\n\nfunction prepareValueText(valueText, formatter, isPercent, isIntegerPart) {\n  var nextValueText = valueText;\n  var char;\n  var text;\n  var nextText;\n\n  do {\n    if (nextText) {\n      char = text.length === nextText.length ? \"0\" : \"1\";\n      valueText = isIntegerPart ? char + valueText : valueText + char;\n    }\n\n    text = nextText || formatter(parseValue(nextValueText, isPercent));\n    nextValueText = isIntegerPart ? \"1\" + nextValueText : nextValueText + \"1\";\n    nextText = formatter(parseValue(nextValueText, isPercent));\n  } while (text !== nextText && (isIntegerPart ? text.length === nextText.length : text.length <= nextText.length));\n\n  if (isIntegerPart && nextText.length > text.length) {\n    var hasGroups = -1 === formatter(12345).indexOf(\"12345\");\n\n    do {\n      valueText = \"1\" + valueText;\n    } while (hasGroups && parseValue(valueText, isPercent) < 1e5);\n  }\n\n  return valueText;\n}\n\nfunction getFormatByValueText(valueText, formatter, isPercent, isNegative) {\n  var format = formatter(parseValue(valueText, isPercent, isNegative));\n  var valueTextParts = valueText.split(\".\");\n  var valueTextWithModifiedFloat = valueTextParts[0] + \".3\" + valueTextParts[1].slice(1);\n  var valueWithModifiedFloat = parseValue(valueTextWithModifiedFloat, isPercent, isNegative);\n  var decimalSeparatorIndex = formatter(valueWithModifiedFloat).indexOf(\"3\") - 1;\n  format = format.replace(/(\\d)\\D(\\d)/g, \"$1,$2\");\n\n  if (decimalSeparatorIndex >= 0) {\n    format = format.slice(0, decimalSeparatorIndex) + \".\" + format.slice(decimalSeparatorIndex + 1);\n  }\n\n  format = format.replace(/1+/, \"1\").replace(/1/g, \"#\");\n\n  if (!isPercent) {\n    format = format.replace(\"%\", \"'%'\");\n  }\n\n  return format;\n}\n\nexport function getFormat(formatter) {\n  var valueText = \".\";\n  var isPercent = formatter(1).indexOf(\"100\") >= 0;\n  valueText = prepareValueText(valueText, formatter, isPercent, true);\n  valueText = prepareValueText(valueText, formatter, isPercent, false);\n  var positiveFormat = getFormatByValueText(valueText, formatter, isPercent, false);\n  var negativeFormat = getFormatByValueText(valueText, formatter, isPercent, true);\n  return negativeFormat === \"-\" + positiveFormat ? positiveFormat : positiveFormat + \";\" + negativeFormat;\n}","map":{"version":3,"sources":["C:/Users/ciara/OneDrive - GMIT/Coin A-Z Test Repo/frontend/node_modules/devextreme/esm/localization/ldml/number.js"],"names":["fitIntoRange","toFixed","DEFAULT_CONFIG","thousandsSeparator","decimalSeparator","ESCAPING_CHAR","MAXIMUM_NUMBER_LENGTH","getGroupSizes","formatString","split","slice","map","str","filter","char","length","getSignParts","format","signParts","push","reverseString","toString","reverse","join","isPercentFormat","indexOf","match","removeStubs","replace","getNonRequiredDigitCount","floatFormat","getRequiredDigitCount","normalizeValueString","valuePart","minDigitCount","maxDigitCount","substr","applyGroups","valueString","groupSizes","groups","index","groupSize","formatNumberPart","formatPart","escapeIndex","isEscape","getFloatPointIndex","getFormatter","config","value","isNaN","signFormatParts","isPositiveZero","isPositive","numberFormat","floatPointIndex","floatFormatParts","minFloatPrecision","maxFloatPrecision","minIntegerPrecision","maxIntegerPrecision","unlimitedIntegerDigits","integerLength","Math","floor","floatPrecision","valueParts","valueIntegerPart","valueFloatPart","integerString","floatString","result","parseValue","text","isPercent","isNegative","parseFloat","prepareValueText","valueText","formatter","isIntegerPart","nextValueText","nextText","hasGroups","getFormatByValueText","valueTextParts","valueTextWithModifiedFloat","valueWithModifiedFloat","decimalSeparatorIndex","getFormat","positiveFormat","negativeFormat"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/localization/ldml/number.js)\r\n * Version: 21.2.5\r\n * Build date: Mon Jan 17 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    fitIntoRange\r\n} from \"../../core/utils/math\";\r\nimport {\r\n    toFixed\r\n} from \"../utils\";\r\nvar DEFAULT_CONFIG = {\r\n    thousandsSeparator: \",\",\r\n    decimalSeparator: \".\"\r\n};\r\nvar ESCAPING_CHAR = \"'\";\r\nvar MAXIMUM_NUMBER_LENGTH = 15;\r\n\r\nfunction getGroupSizes(formatString) {\r\n    return formatString.split(\",\").slice(1).map((function(str) {\r\n        return str.split(\"\").filter((function(char) {\r\n            return \"#\" === char || \"0\" === char\r\n        })).length\r\n    }))\r\n}\r\n\r\nfunction getSignParts(format) {\r\n    var signParts = format.split(\";\");\r\n    if (1 === signParts.length) {\r\n        signParts.push(\"-\" + signParts[0])\r\n    }\r\n    return signParts\r\n}\r\n\r\nfunction reverseString(str) {\r\n    return str.toString().split(\"\").reverse().join(\"\")\r\n}\r\n\r\nfunction isPercentFormat(format) {\r\n    return -1 !== format.indexOf(\"%\") && !format.match(/'[^']*%[^']*'/g)\r\n}\r\n\r\nfunction removeStubs(str) {\r\n    return str.replace(/'.+'/g, \"\")\r\n}\r\n\r\nfunction getNonRequiredDigitCount(floatFormat) {\r\n    if (!floatFormat) {\r\n        return 0\r\n    }\r\n    var format = removeStubs(floatFormat);\r\n    return format.length - format.replace(/[#]/g, \"\").length\r\n}\r\n\r\nfunction getRequiredDigitCount(floatFormat) {\r\n    if (!floatFormat) {\r\n        return 0\r\n    }\r\n    var format = removeStubs(floatFormat);\r\n    return format.length - format.replace(/[0]/g, \"\").length\r\n}\r\n\r\nfunction normalizeValueString(valuePart, minDigitCount, maxDigitCount) {\r\n    if (!valuePart) {\r\n        return \"\"\r\n    }\r\n    if (valuePart.length > maxDigitCount) {\r\n        valuePart = valuePart.substr(0, maxDigitCount)\r\n    }\r\n    while (valuePart.length > minDigitCount && \"0\" === valuePart.slice(-1)) {\r\n        valuePart = valuePart.substr(0, valuePart.length - 1)\r\n    }\r\n    while (valuePart.length < minDigitCount) {\r\n        valuePart += \"0\"\r\n    }\r\n    return valuePart\r\n}\r\n\r\nfunction applyGroups(valueString, groupSizes, thousandsSeparator) {\r\n    if (!groupSizes.length) {\r\n        return valueString\r\n    }\r\n    var groups = [];\r\n    var index = 0;\r\n    while (valueString) {\r\n        var groupSize = groupSizes[index];\r\n        if (!groupSize) {\r\n            break\r\n        }\r\n        groups.push(valueString.slice(0, groupSize));\r\n        valueString = valueString.slice(groupSize);\r\n        if (index < groupSizes.length - 1) {\r\n            index++\r\n        }\r\n    }\r\n    return groups.join(thousandsSeparator)\r\n}\r\n\r\nfunction formatNumberPart(format, valueString) {\r\n    return format.split(ESCAPING_CHAR).map((function(formatPart, escapeIndex) {\r\n        var isEscape = escapeIndex % 2;\r\n        if (!formatPart && isEscape) {\r\n            return ESCAPING_CHAR\r\n        }\r\n        return isEscape ? formatPart : formatPart.replace(/[,#0]+/, valueString)\r\n    })).join(\"\")\r\n}\r\n\r\nfunction getFloatPointIndex(format) {\r\n    var isEscape = false;\r\n    for (var index = 0; index < format.length; index++) {\r\n        if (\"'\" === format[index]) {\r\n            isEscape = !isEscape\r\n        }\r\n        if (\".\" === format[index] && !isEscape) {\r\n            return index\r\n        }\r\n    }\r\n    return format.length\r\n}\r\nexport function getFormatter(format, config) {\r\n    config = config || DEFAULT_CONFIG;\r\n    return function(value) {\r\n        if (\"number\" !== typeof value || isNaN(value)) {\r\n            return \"\"\r\n        }\r\n        var signFormatParts = getSignParts(format);\r\n        var isPositiveZero = 1 / value === 1 / 0;\r\n        var isPositive = value > 0 || isPositiveZero;\r\n        var numberFormat = signFormatParts[isPositive ? 0 : 1];\r\n        if (isPercentFormat(numberFormat)) {\r\n            value *= 100\r\n        }\r\n        if (!isPositive) {\r\n            value = -value\r\n        }\r\n        var floatPointIndex = getFloatPointIndex(numberFormat);\r\n        var floatFormatParts = [numberFormat.substr(0, floatPointIndex), numberFormat.substr(floatPointIndex + 1)];\r\n        var minFloatPrecision = getRequiredDigitCount(floatFormatParts[1]);\r\n        var maxFloatPrecision = minFloatPrecision + getNonRequiredDigitCount(floatFormatParts[1]);\r\n        var minIntegerPrecision = getRequiredDigitCount(floatFormatParts[0]);\r\n        var maxIntegerPrecision = getNonRequiredDigitCount(floatFormatParts[0]) || config.unlimitedIntegerDigits ? void 0 : minIntegerPrecision;\r\n        var integerLength = Math.floor(value).toString().length;\r\n        var floatPrecision = fitIntoRange(maxFloatPrecision, 0, MAXIMUM_NUMBER_LENGTH - integerLength);\r\n        var groupSizes = getGroupSizes(floatFormatParts[0]).reverse();\r\n        var valueParts = toFixed(value, floatPrecision < 0 ? 0 : floatPrecision).split(\".\");\r\n        var valueIntegerPart = normalizeValueString(reverseString(valueParts[0]), minIntegerPrecision, maxIntegerPrecision);\r\n        var valueFloatPart = normalizeValueString(valueParts[1], minFloatPrecision, maxFloatPrecision);\r\n        valueIntegerPart = applyGroups(valueIntegerPart, groupSizes, config.thousandsSeparator);\r\n        var integerString = reverseString(formatNumberPart(reverseString(floatFormatParts[0]), valueIntegerPart));\r\n        var floatString = maxFloatPrecision ? formatNumberPart(floatFormatParts[1], valueFloatPart) : \"\";\r\n        var result = integerString + (floatString.match(/\\d/) ? config.decimalSeparator : \"\") + floatString;\r\n        return result\r\n    }\r\n}\r\n\r\nfunction parseValue(text, isPercent, isNegative) {\r\n    var value = (isPercent ? .01 : 1) * parseFloat(text) || 0;\r\n    return isNegative ? -value : value\r\n}\r\n\r\nfunction prepareValueText(valueText, formatter, isPercent, isIntegerPart) {\r\n    var nextValueText = valueText;\r\n    var char;\r\n    var text;\r\n    var nextText;\r\n    do {\r\n        if (nextText) {\r\n            char = text.length === nextText.length ? \"0\" : \"1\";\r\n            valueText = isIntegerPart ? char + valueText : valueText + char\r\n        }\r\n        text = nextText || formatter(parseValue(nextValueText, isPercent));\r\n        nextValueText = isIntegerPart ? \"1\" + nextValueText : nextValueText + \"1\";\r\n        nextText = formatter(parseValue(nextValueText, isPercent))\r\n    } while (text !== nextText && (isIntegerPart ? text.length === nextText.length : text.length <= nextText.length));\r\n    if (isIntegerPart && nextText.length > text.length) {\r\n        var hasGroups = -1 === formatter(12345).indexOf(\"12345\");\r\n        do {\r\n            valueText = \"1\" + valueText\r\n        } while (hasGroups && parseValue(valueText, isPercent) < 1e5)\r\n    }\r\n    return valueText\r\n}\r\n\r\nfunction getFormatByValueText(valueText, formatter, isPercent, isNegative) {\r\n    var format = formatter(parseValue(valueText, isPercent, isNegative));\r\n    var valueTextParts = valueText.split(\".\");\r\n    var valueTextWithModifiedFloat = valueTextParts[0] + \".3\" + valueTextParts[1].slice(1);\r\n    var valueWithModifiedFloat = parseValue(valueTextWithModifiedFloat, isPercent, isNegative);\r\n    var decimalSeparatorIndex = formatter(valueWithModifiedFloat).indexOf(\"3\") - 1;\r\n    format = format.replace(/(\\d)\\D(\\d)/g, \"$1,$2\");\r\n    if (decimalSeparatorIndex >= 0) {\r\n        format = format.slice(0, decimalSeparatorIndex) + \".\" + format.slice(decimalSeparatorIndex + 1)\r\n    }\r\n    format = format.replace(/1+/, \"1\").replace(/1/g, \"#\");\r\n    if (!isPercent) {\r\n        format = format.replace(\"%\", \"'%'\")\r\n    }\r\n    return format\r\n}\r\nexport function getFormat(formatter) {\r\n    var valueText = \".\";\r\n    var isPercent = formatter(1).indexOf(\"100\") >= 0;\r\n    valueText = prepareValueText(valueText, formatter, isPercent, true);\r\n    valueText = prepareValueText(valueText, formatter, isPercent, false);\r\n    var positiveFormat = getFormatByValueText(valueText, formatter, isPercent, false);\r\n    var negativeFormat = getFormatByValueText(valueText, formatter, isPercent, true);\r\n    return negativeFormat === \"-\" + positiveFormat ? positiveFormat : positiveFormat + \";\" + negativeFormat\r\n}\r\n"]},"metadata":{},"sourceType":"module"}