{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/text_box/ui.text_editor.mask.strategy.default.js)\r\n * Version: 21.2.5\r\n * Build date: Mon Jan 17 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport BaseMaskStrategy from \"./ui.text_editor.mask.strategy.base\";\nimport { getChar } from \"../../events/utils/index\";\nimport Promise from \"../../core/polyfills/promise\";\nvar BACKSPACE_INPUT_TYPE = \"deleteContentBackward\";\nvar EMPTY_CHAR = \" \";\n\nclass DefaultMaskStrategy extends BaseMaskStrategy {\n  _getStrategyName() {\n    return \"default\";\n  }\n\n  getHandleEventNames() {\n    return [...super.getHandleEventNames(), \"keyPress\"];\n  }\n\n  _keyPressHandler(event) {\n    if (this._keyPressHandled) {\n      return;\n    }\n\n    this._keyPressHandled = true;\n\n    if (this.editor._isControlKeyFired(event)) {\n      return;\n    }\n\n    var {\n      editor: editor\n    } = this;\n\n    editor._maskKeyHandler(event, () => editor._handleKey(getChar(event)));\n  }\n\n  _inputHandler(event) {\n    if (this._backspaceInputHandled(event.originalEvent && event.originalEvent.inputType)) {\n      this._handleBackspaceInput(event);\n    }\n\n    if (event.originalEvent) {\n      this._autoFillHandler(event);\n    }\n\n    if (this._keyPressHandled) {\n      return;\n    }\n\n    this._keyPressHandled = true;\n    var inputValue = this.editorInput().val();\n    var caret = this.editorCaret();\n\n    if (!caret.end) {\n      return;\n    }\n\n    caret.start = caret.end - 1;\n    var oldValue = inputValue.substring(0, caret.start) + inputValue.substring(caret.end);\n    var char = inputValue[caret.start];\n    var {\n      editor: editor\n    } = this;\n    this.editorInput().val(oldValue);\n\n    editor._caret({\n      start: caret.start,\n      end: caret.start\n    });\n\n    editor._maskKeyHandler(event, () => editor._handleKey(char));\n  }\n\n  _backspaceHandler(event) {\n    var {\n      editor: editor\n    } = this;\n    this._keyPressHandled = true;\n\n    var afterBackspaceHandler = (needAdjustCaret, callBack) => {\n      if (needAdjustCaret) {\n        editor._direction(this.DIRECTION.FORWARD);\n\n        editor._adjustCaret();\n      }\n\n      var currentCaret = this.editorCaret();\n      return new Promise(resolve => {\n        clearTimeout(this._backspaceHandlerTimeout);\n        this._backspaceHandlerTimeout = setTimeout(function () {\n          callBack(currentCaret);\n          resolve();\n        });\n      });\n    };\n\n    editor._maskKeyHandler(event, () => {\n      if (editor._hasSelection()) {\n        return afterBackspaceHandler(true, currentCaret => {\n          editor._displayMask(currentCaret);\n\n          editor._maskRulesChain.reset();\n        });\n      }\n\n      if (editor._tryMoveCaretBackward()) {\n        return afterBackspaceHandler(false, currentCaret => {\n          this.editorCaret(currentCaret);\n        });\n      }\n\n      editor._handleKey(EMPTY_CHAR, this.DIRECTION.BACKWARD);\n\n      return afterBackspaceHandler(true, currentCaret => {\n        editor._displayMask(currentCaret);\n\n        editor._maskRulesChain.reset();\n      });\n    });\n  }\n\n  _backspaceInputHandled(inputType) {\n    return inputType === BACKSPACE_INPUT_TYPE && !this._keyPressHandled;\n  }\n\n  _handleBackspaceInput(event) {\n    var {\n      start: start,\n      end: end\n    } = this.editorCaret();\n    this.editorCaret({\n      start: start + 1,\n      end: end + 1\n    });\n\n    this._backspaceHandler(event);\n  }\n\n}\n\nexport default DefaultMaskStrategy;","map":{"version":3,"sources":["C:/Users/ciara/OneDrive - GMIT/Coin A-Z Test Repo/frontend/node_modules/devextreme/esm/ui/text_box/ui.text_editor.mask.strategy.default.js"],"names":["BaseMaskStrategy","getChar","Promise","BACKSPACE_INPUT_TYPE","EMPTY_CHAR","DefaultMaskStrategy","_getStrategyName","getHandleEventNames","_keyPressHandler","event","_keyPressHandled","editor","_isControlKeyFired","_maskKeyHandler","_handleKey","_inputHandler","_backspaceInputHandled","originalEvent","inputType","_handleBackspaceInput","_autoFillHandler","inputValue","editorInput","val","caret","editorCaret","end","start","oldValue","substring","char","_caret","_backspaceHandler","afterBackspaceHandler","needAdjustCaret","callBack","_direction","DIRECTION","FORWARD","_adjustCaret","currentCaret","resolve","clearTimeout","_backspaceHandlerTimeout","setTimeout","_hasSelection","_displayMask","_maskRulesChain","reset","_tryMoveCaretBackward","BACKWARD"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/text_box/ui.text_editor.mask.strategy.default.js)\r\n * Version: 21.2.5\r\n * Build date: Mon Jan 17 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport BaseMaskStrategy from \"./ui.text_editor.mask.strategy.base\";\r\nimport {\r\n    getChar\r\n} from \"../../events/utils/index\";\r\nimport Promise from \"../../core/polyfills/promise\";\r\nvar BACKSPACE_INPUT_TYPE = \"deleteContentBackward\";\r\nvar EMPTY_CHAR = \" \";\r\nclass DefaultMaskStrategy extends BaseMaskStrategy {\r\n    _getStrategyName() {\r\n        return \"default\"\r\n    }\r\n    getHandleEventNames() {\r\n        return [...super.getHandleEventNames(), \"keyPress\"]\r\n    }\r\n    _keyPressHandler(event) {\r\n        if (this._keyPressHandled) {\r\n            return\r\n        }\r\n        this._keyPressHandled = true;\r\n        if (this.editor._isControlKeyFired(event)) {\r\n            return\r\n        }\r\n        var {\r\n            editor: editor\r\n        } = this;\r\n        editor._maskKeyHandler(event, () => editor._handleKey(getChar(event)))\r\n    }\r\n    _inputHandler(event) {\r\n        if (this._backspaceInputHandled(event.originalEvent && event.originalEvent.inputType)) {\r\n            this._handleBackspaceInput(event)\r\n        }\r\n        if (event.originalEvent) {\r\n            this._autoFillHandler(event)\r\n        }\r\n        if (this._keyPressHandled) {\r\n            return\r\n        }\r\n        this._keyPressHandled = true;\r\n        var inputValue = this.editorInput().val();\r\n        var caret = this.editorCaret();\r\n        if (!caret.end) {\r\n            return\r\n        }\r\n        caret.start = caret.end - 1;\r\n        var oldValue = inputValue.substring(0, caret.start) + inputValue.substring(caret.end);\r\n        var char = inputValue[caret.start];\r\n        var {\r\n            editor: editor\r\n        } = this;\r\n        this.editorInput().val(oldValue);\r\n        editor._caret({\r\n            start: caret.start,\r\n            end: caret.start\r\n        });\r\n        editor._maskKeyHandler(event, () => editor._handleKey(char))\r\n    }\r\n    _backspaceHandler(event) {\r\n        var {\r\n            editor: editor\r\n        } = this;\r\n        this._keyPressHandled = true;\r\n        var afterBackspaceHandler = (needAdjustCaret, callBack) => {\r\n            if (needAdjustCaret) {\r\n                editor._direction(this.DIRECTION.FORWARD);\r\n                editor._adjustCaret()\r\n            }\r\n            var currentCaret = this.editorCaret();\r\n            return new Promise(resolve => {\r\n                clearTimeout(this._backspaceHandlerTimeout);\r\n                this._backspaceHandlerTimeout = setTimeout((function() {\r\n                    callBack(currentCaret);\r\n                    resolve()\r\n                }))\r\n            })\r\n        };\r\n        editor._maskKeyHandler(event, () => {\r\n            if (editor._hasSelection()) {\r\n                return afterBackspaceHandler(true, currentCaret => {\r\n                    editor._displayMask(currentCaret);\r\n                    editor._maskRulesChain.reset()\r\n                })\r\n            }\r\n            if (editor._tryMoveCaretBackward()) {\r\n                return afterBackspaceHandler(false, currentCaret => {\r\n                    this.editorCaret(currentCaret)\r\n                })\r\n            }\r\n            editor._handleKey(EMPTY_CHAR, this.DIRECTION.BACKWARD);\r\n            return afterBackspaceHandler(true, currentCaret => {\r\n                editor._displayMask(currentCaret);\r\n                editor._maskRulesChain.reset()\r\n            })\r\n        })\r\n    }\r\n    _backspaceInputHandled(inputType) {\r\n        return inputType === BACKSPACE_INPUT_TYPE && !this._keyPressHandled\r\n    }\r\n    _handleBackspaceInput(event) {\r\n        var {\r\n            start: start,\r\n            end: end\r\n        } = this.editorCaret();\r\n        this.editorCaret({\r\n            start: start + 1,\r\n            end: end + 1\r\n        });\r\n        this._backspaceHandler(event)\r\n    }\r\n}\r\nexport default DefaultMaskStrategy;\r\n"]},"metadata":{},"sourceType":"module"}