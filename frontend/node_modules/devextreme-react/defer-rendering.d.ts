/*!
 * devextreme-react
 * Version: 21.2.5
 * Build date: Mon Jan 17 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

import dxDeferRendering, { Properties } from "devextreme/ui/defer_rendering";
import { Component as BaseComponent, IHtmlOptions } from "./core/component";
import NestedOption from "./core/nested-option";
interface IDeferRenderingOptions extends Properties, IHtmlOptions {
}
declare class DeferRendering extends BaseComponent<IDeferRenderingOptions> {
    get instance(): dxDeferRendering;
    protected _WidgetClass: typeof dxDeferRendering;
    protected independentEvents: string[];
    protected _expectedChildren: {
        animation: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
interface IAnimationProps {
    complete?: any;
    delay?: any;
    direction?: any;
    duration?: any;
    easing?: any;
    from?: any;
    staggerDelay?: any;
    start?: any;
    to?: any;
    type?: any;
}
declare class Animation extends NestedOption<IAnimationProps> {
    static OptionName: string;
    static ExpectedChildren: {
        from: {
            optionName: string;
            isCollectionItem: boolean;
        };
        to: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
interface IAtProps {
    x?: any;
    y?: any;
}
declare class At extends NestedOption<IAtProps> {
    static OptionName: string;
}
interface IBoundaryOffsetProps {
    x?: any;
    y?: any;
}
declare class BoundaryOffset extends NestedOption<IBoundaryOffsetProps> {
    static OptionName: string;
}
interface ICollisionProps {
    x?: any;
    y?: any;
}
declare class Collision extends NestedOption<ICollisionProps> {
    static OptionName: string;
}
interface IFromProps {
    left?: any;
    opacity?: any;
    position?: any;
    scale?: any;
    top?: any;
}
declare class From extends NestedOption<IFromProps> {
    static OptionName: string;
    static ExpectedChildren: {
        position: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
interface IMyProps {
    x?: any;
    y?: any;
}
declare class My extends NestedOption<IMyProps> {
    static OptionName: string;
}
interface IOffsetProps {
    x?: any;
    y?: any;
}
declare class Offset extends NestedOption<IOffsetProps> {
    static OptionName: string;
}
interface IPositionProps {
    at?: object | string | {
        x?: any;
        y?: any;
    };
    boundary?: any;
    boundaryOffset?: object | string | {
        x?: any;
        y?: any;
    };
    collision?: object | string | {
        x?: any;
        y?: any;
    };
    my?: object | string | {
        x?: any;
        y?: any;
    };
    of?: any;
    offset?: object | string | {
        x?: any;
        y?: any;
    };
}
declare class Position extends NestedOption<IPositionProps> {
    static OptionName: string;
    static ExpectedChildren: {
        at: {
            optionName: string;
            isCollectionItem: boolean;
        };
        boundaryOffset: {
            optionName: string;
            isCollectionItem: boolean;
        };
        collision: {
            optionName: string;
            isCollectionItem: boolean;
        };
        my: {
            optionName: string;
            isCollectionItem: boolean;
        };
        offset: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
interface IToProps {
    left?: any;
    opacity?: any;
    position?: any;
    scale?: any;
    top?: any;
}
declare class To extends NestedOption<IToProps> {
    static OptionName: string;
}
export default DeferRendering;
export { DeferRendering, IDeferRenderingOptions, Animation, IAnimationProps, At, IAtProps, BoundaryOffset, IBoundaryOffsetProps, Collision, ICollisionProps, From, IFromProps, My, IMyProps, Offset, IOffsetProps, Position, IPositionProps, To, IToProps };
