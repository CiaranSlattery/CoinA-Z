/*!
 * devextreme-react
 * Version: 21.2.5
 * Build date: Mon Jan 17 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

/// <reference types="react" />
export { ExplicitTypes } from "devextreme/ui/menu";
import dxMenu, { Properties } from "devextreme/ui/menu";
import { Component as BaseComponent, IHtmlOptions } from "./core/component";
import NestedOption from "./core/nested-option";
interface IMenuOptions<TKey = any> extends Properties<TKey>, IHtmlOptions {
    dataSource?: Properties<TKey>["dataSource"];
    itemRender?: (...params: any) => React.ReactNode;
    itemComponent?: React.ComponentType<any>;
    itemKeyFn?: (data: any) => string;
    defaultItems?: any;
    defaultSelectedItem?: any;
    onItemsChange?: (value: any) => void;
    onSelectedItemChange?: (value: any) => void;
}
declare class Menu<TKey = any> extends BaseComponent<IMenuOptions<TKey>> {
    get instance(): dxMenu<TKey>;
    protected _WidgetClass: typeof dxMenu;
    protected subscribableOptions: string[];
    protected independentEvents: string[];
    protected _defaults: {
        defaultItems: string;
        defaultSelectedItem: string;
    };
    protected _expectedChildren: {
        animation: {
            optionName: string;
            isCollectionItem: boolean;
        };
        item: {
            optionName: string;
            isCollectionItem: boolean;
        };
        showFirstSubmenuMode: {
            optionName: string;
            isCollectionItem: boolean;
        };
        showSubmenuMode: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    protected _templateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
interface IAnimationProps {
    hide?: any;
    show?: any;
}
declare class Animation extends NestedOption<IAnimationProps> {
    static OptionName: string;
    static ExpectedChildren: {
        hide: {
            optionName: string;
            isCollectionItem: boolean;
        };
        show: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
interface IAtProps {
    x?: any;
    y?: any;
}
declare class At extends NestedOption<IAtProps> {
    static OptionName: string;
}
interface IBoundaryOffsetProps {
    x?: any;
    y?: any;
}
declare class BoundaryOffset extends NestedOption<IBoundaryOffsetProps> {
    static OptionName: string;
}
interface ICollisionProps {
    x?: any;
    y?: any;
}
declare class Collision extends NestedOption<ICollisionProps> {
    static OptionName: string;
}
interface IDelayProps {
    hide?: any;
    show?: any;
}
declare class Delay extends NestedOption<IDelayProps> {
    static OptionName: string;
}
interface IFromProps {
    left?: any;
    opacity?: any;
    position?: any;
    scale?: any;
    top?: any;
}
declare class From extends NestedOption<IFromProps> {
    static OptionName: string;
    static ExpectedChildren: {
        position: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
interface IHideProps {
    complete?: any;
    delay?: any;
    direction?: any;
    duration?: any;
    easing?: any;
    from?: any;
    staggerDelay?: any;
    start?: any;
    to?: any;
    type?: any;
}
declare class Hide extends NestedOption<IHideProps> {
    static OptionName: string;
    static ExpectedChildren: {
        from: {
            optionName: string;
            isCollectionItem: boolean;
        };
        to: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
interface IItemProps {
    beginGroup?: any;
    closeMenuOnClick?: any;
    disabled?: any;
    html?: any;
    icon?: any;
    items?: any;
    selectable?: any;
    selected?: any;
    template?: any;
    text?: any;
    visible?: any;
    render?: (...params: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
}
declare class Item extends NestedOption<IItemProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
interface IMyProps {
    x?: any;
    y?: any;
}
declare class My extends NestedOption<IMyProps> {
    static OptionName: string;
}
interface IOffsetProps {
    x?: any;
    y?: any;
}
declare class Offset extends NestedOption<IOffsetProps> {
    static OptionName: string;
}
interface IPositionProps {
    at?: object | string | {
        x?: any;
        y?: any;
    };
    boundary?: any;
    boundaryOffset?: object | string | {
        x?: any;
        y?: any;
    };
    collision?: object | string | {
        x?: any;
        y?: any;
    };
    my?: object | string | {
        x?: any;
        y?: any;
    };
    of?: any;
    offset?: object | string | {
        x?: any;
        y?: any;
    };
}
declare class Position extends NestedOption<IPositionProps> {
    static OptionName: string;
    static ExpectedChildren: {
        at: {
            optionName: string;
            isCollectionItem: boolean;
        };
        boundaryOffset: {
            optionName: string;
            isCollectionItem: boolean;
        };
        collision: {
            optionName: string;
            isCollectionItem: boolean;
        };
        my: {
            optionName: string;
            isCollectionItem: boolean;
        };
        offset: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
interface IShowProps {
    complete?: any;
    delay?: any;
    direction?: any;
    duration?: any;
    easing?: any;
    from?: any;
    staggerDelay?: any;
    start?: any;
    to?: any;
    type?: any;
}
declare class Show extends NestedOption<IShowProps> {
    static OptionName: string;
}
interface IShowFirstSubmenuModeProps {
    delay?: number | object | {
        hide?: any;
        show?: any;
    };
    name?: any;
}
declare class ShowFirstSubmenuMode extends NestedOption<IShowFirstSubmenuModeProps> {
    static OptionName: string;
    static ExpectedChildren: {
        delay: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
interface IShowSubmenuModeProps {
    delay?: number | object | {
        hide?: any;
        show?: any;
    };
    name?: any;
}
declare class ShowSubmenuMode extends NestedOption<IShowSubmenuModeProps> {
    static OptionName: string;
    static ExpectedChildren: {
        delay: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
interface IToProps {
    left?: any;
    opacity?: any;
    position?: any;
    scale?: any;
    top?: any;
}
declare class To extends NestedOption<IToProps> {
    static OptionName: string;
}
export default Menu;
export { Menu, IMenuOptions, Animation, IAnimationProps, At, IAtProps, BoundaryOffset, IBoundaryOffsetProps, Collision, ICollisionProps, Delay, IDelayProps, From, IFromProps, Hide, IHideProps, Item, IItemProps, My, IMyProps, Offset, IOffsetProps, Position, IPositionProps, Show, IShowProps, ShowFirstSubmenuMode, IShowFirstSubmenuModeProps, ShowSubmenuMode, IShowSubmenuModeProps, To, IToProps };
